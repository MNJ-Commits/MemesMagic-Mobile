

//
//  MessagesViewController.swift
//  MessagesExtension
//
import UIKit
import Messages



protocol MessagesViewControllerDelegate {
  func didSelect(message: MSMessage, conversation: MSConversation)
  func didReceive(message: MSMessage, conversation: MSConversation)
  func didStartSending(message: MSMessage, conversation: MSConversation)
  func didCancelSending(message: MSMessage, conversation: MSConversation)
  func didTransition(to presentationStyle: MSMessagesAppPresentationStyle)
}


class MessagesViewController: MSMessagesAppViewController {

  var delegate: MessagesViewControllerDelegate?
  var moduleInitializer: ModuleInitializer?
  var bridge: RCTBridge?
  
  override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view.
  }

  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    self.removeAllChildViewControllers()
  }
  
  override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
    // Called before the extension transitions to a new presentation style.
    // Use this method to prepare for the change in presentation style.
  }
  
  override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
    // Called after the extension transitions to a new presentation style.
    // Use this method to finalize any behaviors associated with the change in presentation style.
    self.delegate?.didTransition(to: presentationStyle)
  }
  
  override func willBecomeActive(with conversation: MSConversation) {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    // Use this method to configure the extension and restore previously stored state.
    self.presentReactNativeView()
  }

  override func didResignActive(with conversation: MSConversation) {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dismisses the extension, changes to a different
    // conversation or quits Messages.
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
  }

  override func didSelect(_ message: MSMessage, conversation: MSConversation) {
    self.delegate?.didSelect(message: message, conversation: conversation)
  }

  override func didReceive(_ message: MSMessage, conversation: MSConversation) {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    // Use this method to trigger UI updates in response to the message.
    self.delegate?.didReceive(message: message, conversation: conversation)
  }

  override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
    // Called when the user taps the send button.
    self.delegate?.didStartSending(message: message, conversation: conversation)
  }
  
  override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
    // Called when the user deletes the message without sending it.
    // Use this to clean up state related to the deleted message.
    self.delegate?.didCancelSending(message: message, conversation: conversation)
  }


  
  private func removeAllChildViewControllers() {
    for child in self.children {
      child.willMove(toParent: nil)
      child.view.removeFromSuperview()
      child.removeFromParent()
    }
  }
  

  private func presentReactNativeView() {
    
    self.removeAllChildViewControllers()
    self.moduleInitializer = ModuleInitializer(messagesVC: self)
    self.bridge = RCTBridge(delegate: self.moduleInitializer, launchOptions: nil)
    
    let bundleURL = RCTBundleURLProvider
                    .sharedSettings()?
                    .jsBundleURL(forBundleRoot: "index.message", fallbackResource: nil)

    let rootView = RCTRootView(
                    bridge: self.bridge!,
//                    bundleURL: bundleURL!,
                    moduleName: "DemoApp",
                    initialProperties: nil
//                    launchOptions: nil
                   )

    let rootViewController = UIViewController()
    rootViewController.view = rootView

    self.addChild(rootViewController)
    rootViewController.view.frame = self.view.bounds
    rootViewController.view.translatesAutoresizingMaskIntoConstraints = false

    self.view.addSubview(rootViewController.view)


    NSLayoutConstraint.activate([
      rootViewController.view.leftAnchor.constraint(equalTo: self.view.leftAnchor),
      rootViewController.view.rightAnchor.constraint(equalTo: self.view.rightAnchor),
      rootViewController.view.topAnchor.constraint(equalTo: self.view.topAnchor),
      rootViewController.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor),
    ])

    self.didMove(toParent: self)
  }
  
}
